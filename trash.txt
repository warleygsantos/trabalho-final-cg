##############################################################################################
Degug: mostra linhas e pontos

    std::vector<vector<int>>::iterator it;
    SDL_SetRenderDrawColor(render, 100, 100, 100, 255);
    for (it = obj->faces.begin(); it != obj->faces.end(); ++it)
    {
        for(unsigned int j = 1; j < (*it).size(); ++j)
        {
            Ponto p1 = obj->getPonto((*it).at(j - 1), projecao);
            Ponto p2 = obj->getPonto((*it).at(j), projecao);
            linhaDDA(render, p1.x, p1.y, p2.x, p2.y);
        }
    }
    for(unsigned int i = 0; i < obj->pontos.size(); ++i)
    {
        mostraNumero(render, cor, std::to_string(i), obj->getPonto(i, projecao));
    }
################################################################################################

void mostraNumero(SDL_Renderer *render, SDL_Color cor, string num, Ponto ponto)
{
    TTF_Font *fonte = TTF_OpenFont(fonteName, 15);
    if(!fonte)
    {
        printf("Nao foi possivel abrir a fonte: %s\n", fonteName);
        exit(-1);
    }
    cor.r = 150;
    cor.g = 150;
    cor.b = 150;

    /* Escreve o nome da projecao em uma surface s.
     * Cria uma textura apartir da surface s.
     * Copia a textura para o render no canto superior direito da tela.
     */
    SDL_Surface *s = TTF_RenderText_Solid(fonte, num.c_str(), cor);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(render, s);
    SDL_Rect rect = {(int) ponto.x, (int) ponto.y, s->w, s->h};
    SDL_RenderCopy(render, texture, NULL, &rect);

    SDL_DestroyTexture(texture);
    SDL_FreeSurface(s);
    TTF_CloseFont(fonte);
}

###############################################################################################
